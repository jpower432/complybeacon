// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// Defines values for ComplianceEnrichmentStatus.
const (
	Partial  ComplianceEnrichmentStatus = "partial"
	Success  ComplianceEnrichmentStatus = "success"
	Unknown  ComplianceEnrichmentStatus = "unknown"
	Unmapped ComplianceEnrichmentStatus = "unmapped"
)

// Defines values for ComplianceRiskLevel.
const (
	Critical      ComplianceRiskLevel = "Critical"
	High          ComplianceRiskLevel = "High"
	Informational ComplianceRiskLevel = "Informational"
	Low           ComplianceRiskLevel = "Low"
	Medium        ComplianceRiskLevel = "Medium"
)

// BatchMetadataRequest Request payload for batch retrieval of compliance metadata
type BatchMetadataRequest struct {
	Policies []Policy `json:"policies"`
}

// BatchMetadataResponse Response containing compliance metadata for multiple policy rules
type BatchMetadataResponse struct {
	// Results Compliance metadata results for each policy rule in the batch
	Results []BatchMetadataResult `json:"results"`
	Summary BatchSummary          `json:"summary"`
}

// BatchMetadataResult Compliance metadata result for a single policy rule
type BatchMetadataResult struct {
	// Compliance Compliance metadata including control mappings, framework requirements, and risk assessments. Contains static metadata that can be cached.
	Compliance *Compliance `json:"compliance,omitempty"`
	Error      *Error      `json:"error,omitempty"`

	// Index Index of the policy rule in the original batch
	Index int `json:"index"`

	// Policy Complete evidence log from policy engines and compliance assessment tools
	Policy Policy `json:"policy"`
}

// BatchSummary defines model for BatchSummary.
type BatchSummary struct {
	// DurationMs Total processing time in milliseconds
	DurationMs int `json:"duration_ms"`

	// Failed Number of failed requests
	Failed int `json:"failed"`

	// Success Number of successfully processed requests
	Success int `json:"success"`

	// Total Total number of requests in the batch
	Total int `json:"total"`
}

// Compliance Compliance metadata including control mappings, framework requirements, and risk assessments. Contains static metadata that can be cached.
type Compliance struct {
	// Control Security control metadata including identification, categorization, and remediation guidance
	Control ComplianceControl `json:"control"`

	// EnrichmentStatus Status of the compliance enrichment process: success, unmapped, partial, or unknown.
	EnrichmentStatus ComplianceEnrichmentStatus `json:"enrichmentStatus"`

	// Frameworks Compliance framework mappings and regulatory requirement information
	Frameworks ComplianceFrameworks `json:"frameworks"`

	// Risk Compliance risk assessment metadata
	Risk *ComplianceRisk `json:"risk,omitempty"`
}

// ComplianceEnrichmentStatus Status of the compliance enrichment process: success, unmapped, partial, or unknown.
type ComplianceEnrichmentStatus string

// ComplianceControl Security control metadata including identification, categorization, and remediation guidance
type ComplianceControl struct {
	// Applicability Environments or contexts where this control applies
	Applicability *[]string `json:"applicability,omitempty"`

	// CatalogId Unique identifier for the security control catalog or framework
	CatalogId string `json:"catalogId"`

	// Category Category or family that the security control belongs to
	Category string `json:"category"`

	// Id Unique identifier for the security control being assessed
	Id string `json:"id"`

	// RemediationDescription Description of the recommended remediation strategy for this control
	RemediationDescription *string `json:"remediationDescription,omitempty"`
}

// ComplianceFrameworks Compliance framework mappings and regulatory requirement information
type ComplianceFrameworks struct {
	// Frameworks Regulatory or industry standards being evaluated for compliance
	Frameworks []string `json:"frameworks"`

	// Requirements Compliance requirement identifiers from the frameworks being evaluated
	Requirements []string `json:"requirements"`
}

// ComplianceRisk Compliance risk assessment metadata
type ComplianceRisk struct {
	// Level Risk level associated with non-compliance
	Level *ComplianceRiskLevel `json:"level,omitempty"`
}

// ComplianceRiskLevel Risk level associated with non-compliance
type ComplianceRiskLevel string

// Error defines model for Error.
type Error struct {
	// Code HTTP status code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// MetadataRequest Request payload for retrieving compliance metadata for policy evidence
type MetadataRequest struct {
	// Policy Complete evidence log from policy engines and compliance assessment tools
	Policy Policy `json:"policy"`
}

// MetadataResponse Complete compliance metadata including control mappings, frameworks, risk assessment, and dynamic status
type MetadataResponse struct {
	// Compliance Compliance metadata including control mappings, framework requirements, and risk assessments. Contains static metadata that can be cached.
	Compliance Compliance `json:"compliance"`
}

// Policy Complete evidence log from policy engines and compliance assessment tools
type Policy struct {
	// PolicyEngineName Name of the policy engine that performed the evaluation or enforcement action
	PolicyEngineName string `json:"policyEngineName"`

	// PolicyRuleId Unique identifier for the policy rule being evaluated or enforced
	PolicyRuleId string `json:"policyRuleId"`
}

// PostV1MetadataJSONRequestBody defines body for PostV1Metadata for application/json ContentType.
type PostV1MetadataJSONRequestBody = MetadataRequest

// PostV1MetadataBatchJSONRequestBody defines body for PostV1MetadataBatch for application/json ContentType.
type PostV1MetadataBatchJSONRequestBody = BatchMetadataRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostV1MetadataWithBody request with any body
	PostV1MetadataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Metadata(ctx context.Context, body PostV1MetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1MetadataBatchWithBody request with any body
	PostV1MetadataBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1MetadataBatch(ctx context.Context, body PostV1MetadataBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostV1MetadataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MetadataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Metadata(ctx context.Context, body PostV1MetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MetadataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MetadataBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MetadataBatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1MetadataBatch(ctx context.Context, body PostV1MetadataBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1MetadataBatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostV1MetadataRequest calls the generic PostV1Metadata builder with application/json body
func NewPostV1MetadataRequest(server string, body PostV1MetadataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MetadataRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1MetadataRequestWithBody generates requests for PostV1Metadata with any type of body
func NewPostV1MetadataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1MetadataBatchRequest calls the generic PostV1MetadataBatch builder with application/json body
func NewPostV1MetadataBatchRequest(server string, body PostV1MetadataBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1MetadataBatchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1MetadataBatchRequestWithBody generates requests for PostV1MetadataBatch with any type of body
func NewPostV1MetadataBatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/metadata/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostV1MetadataWithBodyWithResponse request with any body
	PostV1MetadataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MetadataResponse, error)

	PostV1MetadataWithResponse(ctx context.Context, body PostV1MetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MetadataResponse, error)

	// PostV1MetadataBatchWithBodyWithResponse request with any body
	PostV1MetadataBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MetadataBatchResponse, error)

	PostV1MetadataBatchWithResponse(ctx context.Context, body PostV1MetadataBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MetadataBatchResponse, error)
}

type PostV1MetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetadataResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostV1MetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1MetadataBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchMetadataResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostV1MetadataBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1MetadataBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostV1MetadataWithBodyWithResponse request with arbitrary body returning *PostV1MetadataResponse
func (c *ClientWithResponses) PostV1MetadataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MetadataResponse, error) {
	rsp, err := c.PostV1MetadataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MetadataResponse(rsp)
}

func (c *ClientWithResponses) PostV1MetadataWithResponse(ctx context.Context, body PostV1MetadataJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MetadataResponse, error) {
	rsp, err := c.PostV1Metadata(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MetadataResponse(rsp)
}

// PostV1MetadataBatchWithBodyWithResponse request with arbitrary body returning *PostV1MetadataBatchResponse
func (c *ClientWithResponses) PostV1MetadataBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1MetadataBatchResponse, error) {
	rsp, err := c.PostV1MetadataBatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MetadataBatchResponse(rsp)
}

func (c *ClientWithResponses) PostV1MetadataBatchWithResponse(ctx context.Context, body PostV1MetadataBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1MetadataBatchResponse, error) {
	rsp, err := c.PostV1MetadataBatch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1MetadataBatchResponse(rsp)
}

// ParsePostV1MetadataResponse parses an HTTP response from a PostV1MetadataWithResponse call
func ParsePostV1MetadataResponse(rsp *http.Response) (*PostV1MetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostV1MetadataBatchResponse parses an HTTP response from a PostV1MetadataBatchWithResponse call
func ParsePostV1MetadataBatchResponse(rsp *http.Response) (*PostV1MetadataBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1MetadataBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchMetadataResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
