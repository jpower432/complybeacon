// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// Defines values for ComplianceEnrichmentStatus.
const (
	ComplianceEnrichmentStatusPartial  ComplianceEnrichmentStatus = "partial"
	ComplianceEnrichmentStatusSuccess  ComplianceEnrichmentStatus = "success"
	ComplianceEnrichmentStatusUnknown  ComplianceEnrichmentStatus = "unknown"
	ComplianceEnrichmentStatusUnmapped ComplianceEnrichmentStatus = "unmapped"
)

// Defines values for ComplianceStatus.
const (
	COMPLIANT     ComplianceStatus = "COMPLIANT"
	EXEMPT        ComplianceStatus = "EXEMPT"
	NONCOMPLIANT  ComplianceStatus = "NON_COMPLIANT"
	NOTAPPLICABLE ComplianceStatus = "NOT_APPLICABLE"
	UNKNOWN       ComplianceStatus = "UNKNOWN"
)

// Defines values for ComplianceRiskLevel.
const (
	Critical      ComplianceRiskLevel = "Critical"
	High          ComplianceRiskLevel = "High"
	Informational ComplianceRiskLevel = "Informational"
	Low           ComplianceRiskLevel = "Low"
	Medium        ComplianceRiskLevel = "Medium"
)

// Defines values for EvidencePolicyEvaluationStatus.
const (
	EvidencePolicyEvaluationStatusFailed        EvidencePolicyEvaluationStatus = "Failed"
	EvidencePolicyEvaluationStatusNeedsReview   EvidencePolicyEvaluationStatus = "Needs Review"
	EvidencePolicyEvaluationStatusNotApplicable EvidencePolicyEvaluationStatus = "Not Applicable"
	EvidencePolicyEvaluationStatusNotRun        EvidencePolicyEvaluationStatus = "Not Run"
	EvidencePolicyEvaluationStatusPassed        EvidencePolicyEvaluationStatus = "Passed"
	EvidencePolicyEvaluationStatusUnknown       EvidencePolicyEvaluationStatus = "Unknown"
)

// Compliance Compliance details from OCSF Security Control Profile.
type Compliance struct {
	// Control Security control information for compliance assessment
	Control ComplianceControl `json:"control"`

	// EnrichmentStatus Status of the compliance enrichment process: success, unmapped, partial, or unknown.
	EnrichmentStatus ComplianceEnrichmentStatus `json:"enrichmentStatus"`

	// Frameworks Compliance framework and requirement information
	Frameworks ComplianceFrameworks `json:"frameworks"`

	// Risk Compliance risk assessment information
	Risk *ComplianceRisk `json:"risk,omitempty"`

	// Status Compliance status
	Status ComplianceStatus `json:"status"`
}

// ComplianceEnrichmentStatus Status of the compliance enrichment process: success, unmapped, partial, or unknown.
type ComplianceEnrichmentStatus string

// ComplianceStatus Compliance status
type ComplianceStatus string

// ComplianceControl Security control information for compliance assessment
type ComplianceControl struct {
	// Applicability Environments or contexts where this control applies
	Applicability *[]string `json:"applicability,omitempty"`

	// CatalogId Unique identifier for the security control catalog or framework
	CatalogId string `json:"catalogId"`

	// Category Category or family that the security control belongs to
	Category string `json:"category"`

	// Id Unique identifier for the security control being assessed
	Id string `json:"id"`

	// RemediationDescription Description of the recommended remediation strategy for this control
	RemediationDescription *string `json:"remediationDescription,omitempty"`
}

// ComplianceFrameworks Compliance framework and requirement information
type ComplianceFrameworks struct {
	// Frameworks Regulatory or industry standards being evaluated for compliance
	Frameworks []string `json:"frameworks"`

	// Requirements Compliance requirement identifiers from the frameworks being evaluated
	Requirements []string `json:"requirements"`
}

// ComplianceRisk Compliance risk assessment information
type ComplianceRisk struct {
	// Level Risk level associated with non-compliance
	Level *ComplianceRiskLevel `json:"level,omitempty"`
}

// ComplianceRiskLevel Risk level associated with non-compliance
type ComplianceRiskLevel string

// EnrichmentRequest Request payload for telemetry attribute enrichment
type EnrichmentRequest struct {
	// Evidence Complete evidence log from policy engines and compliance assessment tools
	Evidence Evidence `json:"evidence"`
}

// EnrichmentResponse Enriched compliance finding with risk attributes and threat mappings.
type EnrichmentResponse struct {
	// Compliance Compliance details from OCSF Security Control Profile.
	Compliance Compliance `json:"compliance"`
}

// Error defines model for Error.
type Error struct {
	// Code HTTP status code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Evidence Complete evidence log from policy engines and compliance assessment tools
type Evidence struct {
	// PolicyEngineName Name of the policy engine that performed the evaluation or enforcement action
	PolicyEngineName string `json:"policyEngineName"`

	// PolicyEvaluationStatus Result of the policy evaluation
	PolicyEvaluationStatus EvidencePolicyEvaluationStatus `json:"policyEvaluationStatus"`

	// PolicyRuleId Unique identifier for the policy rule being evaluated or enforced
	PolicyRuleId string `json:"policyRuleId"`

	// RawData Raw JSON output from the policy engine
	RawData *map[string]interface{} `json:"rawData,omitempty"`

	// Timestamp The time when the raw evidence was generated
	Timestamp time.Time `json:"timestamp"`
}

// EvidencePolicyEvaluationStatus Result of the policy evaluation
type EvidencePolicyEvaluationStatus string

// PostV1EnrichJSONRequestBody defines body for PostV1Enrich for application/json ContentType.
type PostV1EnrichJSONRequestBody = EnrichmentRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostV1EnrichWithBody request with any body
	PostV1EnrichWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1Enrich(ctx context.Context, body PostV1EnrichJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostV1EnrichWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrichRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1Enrich(ctx context.Context, body PostV1EnrichJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1EnrichRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostV1EnrichRequest calls the generic PostV1Enrich builder with application/json body
func NewPostV1EnrichRequest(server string, body PostV1EnrichJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1EnrichRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1EnrichRequestWithBody generates requests for PostV1Enrich with any type of body
func NewPostV1EnrichRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/enrich")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostV1EnrichWithBodyWithResponse request with any body
	PostV1EnrichWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrichResponse, error)

	PostV1EnrichWithResponse(ctx context.Context, body PostV1EnrichJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrichResponse, error)
}

type PostV1EnrichResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnrichmentResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r PostV1EnrichResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1EnrichResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostV1EnrichWithBodyWithResponse request with arbitrary body returning *PostV1EnrichResponse
func (c *ClientWithResponses) PostV1EnrichWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1EnrichResponse, error) {
	rsp, err := c.PostV1EnrichWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrichResponse(rsp)
}

func (c *ClientWithResponses) PostV1EnrichWithResponse(ctx context.Context, body PostV1EnrichJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1EnrichResponse, error) {
	rsp, err := c.PostV1Enrich(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1EnrichResponse(rsp)
}

// ParsePostV1EnrichResponse parses an HTTP response from a PostV1EnrichWithResponse call
func ParsePostV1EnrichResponse(rsp *http.Response) (*PostV1EnrichResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1EnrichResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnrichmentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
