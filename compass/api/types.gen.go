// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"time"
)

// Defines values for ComplianceEnrichmentStatus.
const (
	ComplianceEnrichmentStatusPartial  ComplianceEnrichmentStatus = "partial"
	ComplianceEnrichmentStatusSuccess  ComplianceEnrichmentStatus = "success"
	ComplianceEnrichmentStatusUnknown  ComplianceEnrichmentStatus = "unknown"
	ComplianceEnrichmentStatusUnmapped ComplianceEnrichmentStatus = "unmapped"
)

// Defines values for ComplianceStatus.
const (
	COMPLIANT     ComplianceStatus = "COMPLIANT"
	EXEMPT        ComplianceStatus = "EXEMPT"
	NONCOMPLIANT  ComplianceStatus = "NON_COMPLIANT"
	NOTAPPLICABLE ComplianceStatus = "NOT_APPLICABLE"
	UNKNOWN       ComplianceStatus = "UNKNOWN"
)

// Defines values for ComplianceMetadataEnrichmentStatus.
const (
	ComplianceMetadataEnrichmentStatusPartial  ComplianceMetadataEnrichmentStatus = "partial"
	ComplianceMetadataEnrichmentStatusSuccess  ComplianceMetadataEnrichmentStatus = "success"
	ComplianceMetadataEnrichmentStatusUnknown  ComplianceMetadataEnrichmentStatus = "unknown"
	ComplianceMetadataEnrichmentStatusUnmapped ComplianceMetadataEnrichmentStatus = "unmapped"
)

// Defines values for ComplianceRiskLevel.
const (
	Critical      ComplianceRiskLevel = "Critical"
	High          ComplianceRiskLevel = "High"
	Informational ComplianceRiskLevel = "Informational"
	Low           ComplianceRiskLevel = "Low"
	Medium        ComplianceRiskLevel = "Medium"
)

// Defines values for EvidencePolicyEvaluationStatus.
const (
	Failed        EvidencePolicyEvaluationStatus = "Failed"
	NeedsReview   EvidencePolicyEvaluationStatus = "Needs Review"
	NotApplicable EvidencePolicyEvaluationStatus = "Not Applicable"
	NotRun        EvidencePolicyEvaluationStatus = "Not Run"
	Passed        EvidencePolicyEvaluationStatus = "Passed"
	Unknown       EvidencePolicyEvaluationStatus = "Unknown"
)

// BatchError defines model for BatchError.
type BatchError struct {
	// Code Error code
	Code string `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// BatchMetadataRequest defines model for BatchMetadataRequest.
type BatchMetadataRequest struct {
	Options *BatchOptions `json:"options,omitempty"`

	// PolicyEngineNames Array of policy engine names (optional, for context)
	PolicyEngineNames *[]string `json:"policyEngineNames,omitempty"`

	// PolicyRuleIds Array of policy rule IDs to retrieve metadata for
	PolicyRuleIds []string `json:"policyRuleIds"`
}

// BatchMetadataResponse defines model for BatchMetadataResponse.
type BatchMetadataResponse struct {
	// Results Results for each policy rule in the batch
	Results []BatchMetadataResult `json:"results"`
	Summary BatchSummary          `json:"summary"`
}

// BatchMetadataResult defines model for BatchMetadataResult.
type BatchMetadataResult struct {
	Error *BatchError `json:"error,omitempty"`

	// Index Index of the policy rule in the original batch
	Index int `json:"index"`

	// Metadata Static compliance metadata that can be cached
	Metadata *ComplianceMetadata `json:"metadata,omitempty"`

	// PolicyRuleId The policy rule ID
	PolicyRuleId string `json:"policyRuleId"`
}

// BatchOptions defines model for BatchOptions.
type BatchOptions struct {
	// MaxConcurrency Maximum number of concurrent requests to process
	MaxConcurrency *int `json:"max_concurrency,omitempty"`

	// ReturnErrors Whether to include errors in the response
	ReturnErrors *bool `json:"return_errors,omitempty"`

	// TimeoutSeconds Timeout in seconds for the entire batch operation
	TimeoutSeconds *int `json:"timeout_seconds,omitempty"`
}

// BatchSummary defines model for BatchSummary.
type BatchSummary struct {
	// DurationMs Total processing time in milliseconds
	DurationMs int `json:"duration_ms"`

	// Failed Number of failed requests
	Failed int `json:"failed"`

	// Success Number of successfully processed requests
	Success int `json:"success"`

	// Total Total number of requests in the batch
	Total int `json:"total"`
}

// Compliance Compliance details from OCSF Security Control Profile.
type Compliance struct {
	// Control Security control information for compliance assessment
	Control ComplianceControl `json:"control"`

	// EnrichmentStatus Status of the compliance enrichment process: success, unmapped, partial, or unknown.
	EnrichmentStatus ComplianceEnrichmentStatus `json:"enrichmentStatus"`

	// Frameworks Compliance framework and requirement information
	Frameworks ComplianceFrameworks `json:"frameworks"`

	// Risk Compliance risk assessment information
	Risk *ComplianceRisk `json:"risk,omitempty"`

	// Status Compliance status
	Status *ComplianceStatus `json:"status,omitempty"`
}

// ComplianceEnrichmentStatus Status of the compliance enrichment process: success, unmapped, partial, or unknown.
type ComplianceEnrichmentStatus string

// ComplianceStatus Compliance status
type ComplianceStatus string

// ComplianceControl Security control information for compliance assessment
type ComplianceControl struct {
	// Applicability Environments or contexts where this control applies
	Applicability *[]string `json:"applicability,omitempty"`

	// CatalogId Unique identifier for the security control catalog or framework
	CatalogId string `json:"catalogId"`

	// Category Category or family that the security control belongs to
	Category string `json:"category"`

	// Id Unique identifier for the security control being assessed
	Id string `json:"id"`

	// RemediationDescription Description of the recommended remediation strategy for this control
	RemediationDescription *string `json:"remediationDescription,omitempty"`
}

// ComplianceFrameworks Compliance framework and requirement information
type ComplianceFrameworks struct {
	// Frameworks Regulatory or industry standards being evaluated for compliance
	Frameworks []string `json:"frameworks"`

	// Requirements Compliance requirement identifiers from the frameworks being evaluated
	Requirements []string `json:"requirements"`
}

// ComplianceMetadata Static compliance metadata that can be cached
type ComplianceMetadata struct {
	// Control Security control information for compliance assessment
	Control ComplianceControl `json:"control"`

	// EnrichmentStatus Status of the compliance enrichment process: success, unmapped, partial, or unknown.
	EnrichmentStatus ComplianceMetadataEnrichmentStatus `json:"enrichmentStatus"`

	// Frameworks Compliance framework and requirement information
	Frameworks ComplianceFrameworks `json:"frameworks"`

	// Risk Compliance risk assessment information
	Risk *ComplianceRisk `json:"risk,omitempty"`
}

// ComplianceMetadataEnrichmentStatus Status of the compliance enrichment process: success, unmapped, partial, or unknown.
type ComplianceMetadataEnrichmentStatus string

// ComplianceRisk Compliance risk assessment information
type ComplianceRisk struct {
	// Level Risk level associated with non-compliance
	Level *ComplianceRiskLevel `json:"level,omitempty"`
}

// ComplianceRiskLevel Risk level associated with non-compliance
type ComplianceRiskLevel string

// EnrichmentRequest Request payload for telemetry attribute enrichment
type EnrichmentRequest struct {
	// Evidence Complete evidence log from policy engines and compliance assessment tools
	Evidence Evidence `json:"evidence"`
}

// EnrichmentResponse Enriched compliance finding with risk attributes and threat mappings.
type EnrichmentResponse struct {
	// Compliance Compliance details from OCSF Security Control Profile.
	Compliance Compliance `json:"compliance"`
}

// Error defines model for Error.
type Error struct {
	// Code HTTP status code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Evidence Complete evidence log from policy engines and compliance assessment tools
type Evidence struct {
	// PolicyEngineName Name of the policy engine that performed the evaluation or enforcement action
	PolicyEngineName string `json:"policyEngineName"`

	// PolicyEvaluationStatus Result of the policy evaluation
	PolicyEvaluationStatus EvidencePolicyEvaluationStatus `json:"policyEvaluationStatus"`

	// PolicyRuleId Unique identifier for the policy rule being evaluated or enforced
	PolicyRuleId string `json:"policyRuleId"`

	// RawData Raw JSON output from the policy engine
	RawData *map[string]interface{} `json:"rawData,omitempty"`

	// Timestamp The time when the raw evidence was generated
	Timestamp time.Time `json:"timestamp"`
}

// EvidencePolicyEvaluationStatus Result of the policy evaluation
type EvidencePolicyEvaluationStatus string

// PostV1EnrichJSONRequestBody defines body for PostV1Enrich for application/json ContentType.
type PostV1EnrichJSONRequestBody = EnrichmentRequest

// PostV1MetadataBatchJSONRequestBody defines body for PostV1MetadataBatch for application/json ContentType.
type PostV1MetadataBatchJSONRequestBody = BatchMetadataRequest
