// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enrich telemetry attributes with compliance control data
	// (POST /v1/enrich)
	PostV1Enrich(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostV1Enrich operation middleware
func (siw *ServerInterfaceWrapper) PostV1Enrich(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Enrich(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/enrich", wrapper.PostV1Enrich)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tS2sNxYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
