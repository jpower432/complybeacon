// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enrich telemetry attributes with compliance control data
	// (POST /v1/enrich)
	PostV1Enrich(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostV1Enrich operation middleware
func (siw *ServerInterfaceWrapper) PostV1Enrich(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1Enrich(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/enrich", wrapper.PostV1Enrich)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RYa28buRX9KwRboC0wksfxblvom6I4WLWJrNpKW3RtLOjhlcQ1h5yQHClC4P9eXHIe",
	"nIfsLNJ+k4aP+zr33DPzlWY6L7QC5SydfaU220PO/M+FzgspmMoA/zHOhRNaMbk2ugDjBFg62zJpIaEc",
	"bGZEget0Fh0kHBwT0pKt0Tm5Wdy9J3eQlUa4E1lo5YyWZG30VkiY0oQW0c3omN+AP39vYEtn9HcXrbMX",
	"lacXrbXqRvqcUFBGZPsclLtzzJX+vq6T4TnRW+L2QLLW5fYoKYzOwNoZsWWGPxJSqpwVBfCEFMw4wWRC",
	"tCGlelL6qDAEUGVOZz/T6gRNaH0E4wtn/EN/gj4kFL6wvJBAZ9EZdyr8A2eE2mE8W8NyOGrzZL89He/b",
	"M88JNcI+ffvZW9z9nFB7JntRiastbeiLm4/rD8v5akMTurpZ/RL/v/739cd1WNj8Ml+vPywX87cfrmlC",
	"P63+vrr516qbkf7xXl4wLPhcCgMcDdeA6aSriWEEFA8JdcJ5SxHYGzP68VfIHKZhiLEhnmpcV14Qobba",
	"5AyXyVabGGLMWrAWHRmAnhWFFBl7FFK409DKtToIoxUetcRfqhx8cZYc92CAuL2wjQP+KvCB1wn9ma6N",
	"5mXmb0uwB3aYyIeECge5d2AAveoBM4ad8H/GHJN6t+RD7z4p8bkEIjgoJ7YCjA8c+8v2s1PdgjE0xYo9",
	"pTd367vJ27FeyJiDnTYj2VlUK/5Wlgt5Im7P3LgHjyC12lnidMfu3PdgzU5j9sX3Rf4IQu0qCHhW6MX8",
	"j/kk/cs0vRwzbSAHLjym3sX2++5EizXDGch0noPiwEl0DbHOYNZOlcMtfjqe3UKuD0CM1o6UFgxhIU1M",
	"cSJwT82XBRiynH8khZYiC+h7uWkFpqDFVFTehxcb8X2HEc+yUwMu72pl2Dsb9eegC7cvXH4Lu1IyV8FM",
	"KF5aZ05Ig4ozw21VYDgwWTIHvNf83XZcLe82k7+m6eTHK+zHm8XkzW/rxiiilxPRCb2BaTWZESBtzP0I",
	"ui7PFxPE5mLx5+nlb/G1V/cORXeieLnut9UcOx+osE8Rw75YZwkHGOFytEH8Gl6kM+HreBRuT5RWk24x",
	"66lnhBOZH+4/id2eJvQjcFHmNKEf9JEmdNn6wWR3zFUHho0yyMN1M8Ju4XMJ1o3h0y+Qgp2kZgF+DrBD",
	"EabMOSMeSxfrnLi+XykcEB5B9PkuPl2rnVCwYrnnqPUc0xgWAkKEVrXKou+ZkEHr+B23pQScFJSDOk2Q",
	"PiZIH1hydnzHHEMrBpgNrvfpRViitCNMSn30txqwpXTVfR5jIgfrWF7QGX2Tvvlhkl5OLn/cXKazq3SW",
	"pv/xaewWPQ7wJTV0Xe/rQ7e54OGVCtlCKwtjUxz3AI81wVYojl3nURYwXJcq0KzbG2COoJgUamen3apl",
	"HbEeSeeeoDivAKK53g7fdtYOB6PgIyPr3IT6jgkyKucjsdwl6/jfWX7tsmaf0yK1XBFE6NBID/eU6RBk",
	"3Xp8m+geEbTN0ijUjNHGt2nPNB/B3E+bzbrS6sTviODzQ5omNLATnVGh3NWblo6EcrADgwZzsJbtxgCN",
	"npB6+XWd7s3X20dDi3p0hOkB+avaQlBG+ikWKIeAp6uArFHRTZzW0g6GwZDs+rbxaa2nOsaCzCzAYBKB",
	"+w3QkCPqBED2zwLIWd19kfLzrDqYoOdodsj5SIt915pj0ZhaaUduS3yyZpX+bCh7BcAtuYWDABxYuHVe",
	"sYfEgn0ae2ltTp9xvp4A366YK/dNKWGgpdpMdpXzYLwMpXM7b3q5Y0fyt7ubFdGlK0rXCqJOhbtsm4Nj",
	"vLrt1QmU0AMYG4xdTtOg2r5j4vV7JXKgH9tmDwSX8fVQhdcAdmw758gs2YEC01d55wJpOIIzBxO8+dVm",
	"b71Lhh3WA8lZwA8pAs2gshvGPF8vGyghWTBriQVzEBlMyQZfcKp/OGwwE80bz+SRWeCjEqmnorD2yb3C",
	"6WD8ACXIkkYxSbjOmVBISiKr5nbrR2E0uv8HGxMTNpUEvoPpvVriGgcrdgppRJNHIBmTEjh5PBGmyE0B",
	"atP4sdBSQua0wRtL65AEwzcrdFdXAaAzNiF4RGQ2CV4ZloGd3iMTxN9A0Mu7Kj/z9bID3nRawVcXoFgh",
	"6IxeTdPplf+y5faely4OlxfBaqDUMYWKSqJwljBiwZPWE5zGJKolf4Tpbpp46nZk+S6pe1KxHJLQN8t3",
	"f8KA7pUBVxplSfuhMkryxID0BBJdHqqt1XjtpvfKgwUUL7TA9wjrN/oX6O8qTEg6Th4PcS+41tq6f14G",
	"XVi9D4F1bzU/1XIOdXor5/Dgxa82vPsHJfGqnB28Ojx3e9WZEvyDIFt9Od+k6f/FgUoZew9639GCrtuW",
	"Up4q/HbKRv2JLfOk+L/yzAupEWdKBV8KyBA4UO1JqC3znHlJHCIah67X8VGX159//Nh4fn5+/m8AAAD/",
	"/58+dM96FwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
