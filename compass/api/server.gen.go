// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Enrich telemetry attributes with compliance control data
	// (POST /v1/enrich)
	PostV1Enrich(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Enrich telemetry attributes with compliance control data
// (POST /v1/enrich)
func (_ Unimplemented) PostV1Enrich(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostV1Enrich operation middleware
func (siw *ServerInterfaceWrapper) PostV1Enrich(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostV1Enrich(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/enrich", wrapper.PostV1Enrich)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
